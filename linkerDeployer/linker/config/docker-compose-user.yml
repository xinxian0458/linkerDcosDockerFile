version: '2'
services:
  mesosmaster:
    image: {registry}/linkerrepository/mesos-master:1.0.1
    network_mode: host
    command: /entrypoint.sh
    env_file: .env
    volumes:
     - /var/lib/mesos:/var/lib/mesos
    privileged: true
    restart: always
    environment:
     - MESOS_LOG_DIR=/var/log/mesos
     #- MESOS_REGISTRY=in_memory
     - MESOS_WORK_DIR=/var/lib/mesos/master
     - "constraint:master==true"
     - "affinity:container!=*mesosmaster*"

  marathon:
    image: {registry}/linkerrepository/marathon:1.3.0
    volumes:
     - /etc/resolv.conf:/etc/resolv.conf
    network_mode: host
    command: /entrypoint.sh
    env_file: .env
    privileged: true
    restart: always
    environment:
     - MARATHON_TASK_LAUNCH_TIMEOUT=900000
     - MARATHON_EVENT_SUBSCRIBER=http_callback
     - MARATHON_MESOS_ROLE=slave_public
     - MARATHON_MESOS_AUTHENTICATION_PRINCIPAL=dcos_marathon
     - MESOS_ENABLE_FEATURES=vips,task_killing,external_volumes
     - "constraint:master==true"
     - "affinity:container!=*marathon*"


  mesosslave:
    image: {registry}/linkerrepository/mesos-slave:1.0.1
    volumes:
     - /sys/fs/cgroup:/sys/fs/cgroup
     - /var/run/docker.sock:/var/run/docker.sock
     - /usr/local/bin:/usr/local/bin
     - /var/lib/mesos:/var/lib/mesos
     - /tmp:/tmp
     - /opt/mesosphere:/opt/mesosphere
     - /etc/resolv.conf:/etc/resolv.conf
    network_mode: host
    command: /entrypoint.sh
    env_file: .env
    privileged: true
    restart: always
    environment:
     - MESOS_CONTAINERIZERS=docker,mesos
     - MESOS_LOG_DIR=/var/log/mesos
     - MESOS_WORK_DIR=/var/lib/mesos/slave
     - MESOS_ISOLATION=cgroups/cpu,cgroups/mem,disk/du,filesystem/linux,docker/runtime,docker/volume
     - MESOS_SLAVE_SUBSYSTEMS=cpu,memory
     - MESOS_CGROUPS_ENABLE_CFS=true
     - MESOS_LOGGING_LEVEL=INFO
     - MESOS_EXECUTOR_REGISTRATION_TIMEOUT=15mins
     - "constraint:slave==true"
     - "affinity:container!=*mesosslave*"

  cosmos:
    image: {registry}/linkerrepository/cosmos:0.1.5
    volumes:
     - /etc/resolv.conf:/etc/resolv.conf
    network_mode: host
    env_file: .env
    depends_on:
     - marathon
    privileged: true
    restart: always
    environment:
     - "constraint:master==true"
     - "affinity:container!=*cosmos*"

  dnsserver:
    image: {registry}/linkerrepository/linker_mesos_dns:1.0.0
    volumes:
    - /linker/config:/linker/config
    network_mode: host
    env_file: .env
    privileged: true
    restart: always
    environment:
     - "constraint:master==true"
     - "affinity:container!=*dnsserver*"

  universenginx:
    image: {registry}/linkerrepository/universe:latest
    env_file: .env
    command: nginx -g "daemon off;"
    network_mode: bridge
    ports:
     - "8082:80"
    depends_on:
     - dnsserver
    privileged: true
    restart: always
    environment:
     - "constraint:master==true"
     - "affinity:container!=*universenginx*"

  universeregistry:
    image: {registry}/linkerrepository/universe:latest
    env_file: .env
    command: registry serve /etc/docker/registry/config.yml
    network_mode: bridge
    ports:
     - "5000:5000"
    depends_on:
     - dnsserver
    privileged: true
    restart: always
    environment:
     - REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt
     - REGISTRY_HTTP_TLS_KEY=/certs/domain.key
     - "constraint:master==true"
     - "affinity:container!=*universeregistry*"

  adminrouter:
    image: {registry}/linkerrepository/linker_router:1.0.1
    volumes:
     - /etc/resolv.conf:/etc/resolv.conf
    network_mode: host
    depends_on:
     - genresolvconf
    restart: always
    environment:
     - "constraint:master==true"
     - "constraint:adminrouter==true"
     - "affinity:container!=*adminrouter*"


  prometheus:
    image: {registry}/prom/prometheus:v1.0.0
    network_mode: host
    entrypoint: /bin/prometheus
    command: -alertmanager.url=http://localhost:9093 -config.file=/etc/prometheus/prometheus.yml
    volumes:
    - /linker/prometheus:/etc/prometheus
    env_file: .env
    privileged: true
    restart: always
    environment:
     - "constraint:monitor==true"
     - "affinity:container!=*prometheus*"

  alertmanager:
    image: {registry}/prom/alertmanager:v0.3.0
    network_mode: host
    volumes:
    - /linker/alertmanager:/etc/alertmanager
    env_file: .env
    privileged: true
    restart: always
    environment:
     - "constraint:monitor==true"
     - "affinity:container!=*alertmanager*"

  mongodb:
    image: {registry}/linkerrepository/linkerdcos_mongodb_repl:1.0.1
    network_mode: host
    volumes:
    - /opt:/data
    env_file: .env
    privileged: true
    restart: always
    environment:
     - "constraint:master==true"
     - "affinity:container!=*mongodb*"

  dcosclient:
    image: {registry}/linkerrepository/linkerdcos_client:latest
    network_mode: host
    volumes:
     - /etc/resolv.conf:/etc/resolv.conf
     - /linker/docker:/linker/docker
     - /var/log:/var/log
     - /root/.docker:/root/.docker:ro
    env_file: .env
    privileged: true
    restart: always
    depends_on:
     - mongodb
     - dnsserver
    entrypoint: /linker/dbcheck.sh
    command: /linker/entrypoint.sh
    environment:
     - "constraint:master==true"
     - "constraint:dcosclient==true"
     - "affinity:container!=*dcosclient*"    

  genresolvconf:
    image: {registry}/linkerrepository/linker_resolver:1.0.0
    volumes:
     - /etc/resolv.conf:/etc/resolv.conf
    network_mode: host
    env_file: .env
    depends_on:
     - dnsserver
    restart: always
    environment:
     - RESOLVERS=8.8.8.8
     - "affinity:container!=*genresolvconf*"

  cadvisormonitor:
    image: {registry}/linkerrepository/linker_cadvisor:1.0.0
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock:rw
     - /:/rootfs:ro
     - /sys:/sys:ro
     - /var/lib/mesos/slave:/tmp/mesos:ro
     - /var/run:/var/run:rw
     - /var/lib/docker:/var/lib/docker:ro
    network_mode: host
    env_file: .env
    privileged: true
    restart: always
    environment:
      - "constraint:slave==true"
      - "affinity:container!=*cadvisormonitor*"

  webconsole:
    image: {registry}/linkerrepository/linker_webconsole:latest
    volumes:
     - /linker/docker/${CLUSTER_OWNER}/${CLUSTER_NAME}/certs:/usr/local/bin/certs:ro
    network_mode: host
    env_file: .env
    privileged: true
    restart: always
    command: /usr/local/bin/entrypoint.sh
    environment:
     - "constraint:master==true"
     - "affinity:container!=*webconsole*"
